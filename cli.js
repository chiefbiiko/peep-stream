var { createPeepWriteStream, createPeepReadStream } = require('./index')
var { datetimify } = require('./datetimify')
var spacify = require('./spacify')
var pump = require('pump')

/* TODO:
  + switch 2 get-opts or similar!
  + check node cli dashboard solutions that allow user input 4 nice replay
  + peep replay
  + peep listen
  + diff.resize
  + tests
 */

var diff = require('ansi-diff')({ width: process.stdout.columns })
var argv = require('minimist')(process.argv.slice(2))

var HELP = 'Usage:\npeep replay FILE\n' +
  'peep tee [FILE]\n' +
  'peep listen [PORT] [FILE]\n\n' +
  'FILE: special PEEP file generated by a Peep instance\n' +
  'PORT: listen on this PORT and redirect inbound data to FILE\n\n' +
  'If your debugging with Peep instances in a browser you need\n' +
  'to first spin up a teeing server with "peep listen" since one cannot\n' +
  'write a PEEP file from a browser context.'

var BUF419 = Buffer.from([ 0, 4, 1, 9, 4, 1, 9, 0 ])

function ondata (pac) {
  process.stdout.write(diff.update(
    'timestamp: ' + datetimify(pac.timestamp) + '\n' +
    'chunk: ' + spacify(pac.chunk.toString('hex')) + '\n'
  ))
}

function replay (file, opts) {
  var peepReadStream = createPeepReadStream(file)
  peepReadStream.on('error', console.error)
  process.stdin.on('data', function onuserinput (chunk) {
    // need2prevent cursor move-down ...
    peepReadStream.once('readable', function onreadable () {
      var read = peepReadStream.read()
      if (read) ondata(pac)
    })
  })
}

function tee (file, opts) {
  var peepStream = createPeepWriteStream(file, opts)
  pump(process.stdin, peepStream, process.stdout, function (err) {
    if (err) console.error(err)
  })
}

function listen (port, file) { // opts?

}

// refactor below with get-opts
if (process.argv.join('').includes('tee')) {
  tee(argv.file)
} else if (process.argv.join('').includes('replay')) {
  replay(argv.file)
} //...
